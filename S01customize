#!/bin/bash -x
rc=255
stderr=/home/stack/debug.stdout
stdout=/home/stack/debug.stdout
branchtype=###BRANCHTYPE###
installtype=###INSTALLTYPE###
rdorelease=###RDORELEASE###
releasever=###RELEASEVER###
minorver=###MINORVER###
enablenfs=###ENABLENFS###
email=###EMAIL###
fullname=###FULLNAME###
rhnusername=###RHNUSERNAME###
rhnpassword=###RHNPASSWORD###
eol="liberty mitaka"

cat /etc/redhat-release  | grep -q "release 8"
if [ $? -eq 0 ]; then
  rhelrelease=8
else
  rhelrelease=7
fi

if [[ ! "${installtype}" =~ rdo ]]; then
  vernum=$( echo $releasever | sed -e 's/rhosp//' )
fi

function cleanup {
  chown stack:stack -R /home/stack
  touch /.autorelabel
  rm -rf /etc/rc3.d/S01customize
  rm -rf /etc/rc3.d/S01loader
}

function configure_local_ntp {
  rc=0
  startlog "Configuring ntpd service"
  if [ -e /etc/ntp.conf ]; then
    cat<<EOF>> /etc/ntp.conf
restrict 192.0.2.0 mask 255.255.255.0 nomodify notrap
server 192.168.122.1
server 0.rhel.pool.ntp.org iburst
server 1.rhel.pool.ntp.org iburst
server 2.rhel.pool.ntp.org iburst
server 3.rhel.pool.ntp.org iburst
EOF
    grep -q 192.168.122.1 /etc/ntp.conf
    if [ $? -eq 0 ]; then
      systemctl stop ntpd 2>>$stderr 1>>$stdout
      systemctl disable chronyd.service 2>>$stderr 1>>$stdout
      systemctl stop chronyd.service 2>>$stderr 1>>$stdout
      ntpdate -v -d 192.168.122.1 2>>$stderr 1>>$stdout
      rc=$?
      systemctl start ntpd 2>>$stderr 1>>$stdout
      if [ $rc -eq 0 ]; then
        endlog "done"
      else
        endlog "error"
      fi
    else
      endlog "error"
    fi
  elif [ -e /etc/chrony.conf  ]; then
    cat <<EOF>/etc/chrony.conf
pool 192.168.122.1 iburst
driftfile /var/lib/chrony/drift
makestep 1.0 3
rtcsync
allow 192.0.2.0/24
keyfile /etc/chrony.keys
leapsectz right/UTC
logdir /var/log/chrony
EOF
    systemctl restart chronyd 2>>$stderr 1>>$stdout
    rc=$?
  else
    endlog "error"
    rc=255
  fi
  return $rc
}

function configure_selinxu {
  sed -i 's/enforcing/permissive/' /usr/share/instack-undercloud/puppet-stack-config/os-apply-config/etc/puppet/hieradata/RedHat.yaml
}

function startlog {
  initial=$(date "+%s")
  printf "%-60s" "$1"
}

function endlog {
  message=$1
  final=$(date "+%s")
  elapsed=$(( $final - $initial ))
  printf "%-15s\n" "$1 (${elapsed}s)"
  if [[ $message =~ error ]]; then
    touch /home/stack/failed
  fi
}

function create_swap_file {
  local swapfile=$1
  local size=$2
  dd if=/dev/zero of=/$swapfile bs=1024 count=$size > /dev/null
  chown root:root /$swapfile > /dev/null
  chmod 0600 /$swapfile > /dev/null
  mkswap /$swapfile > /dev/null
  swapon /$swapfile > /dev/null
  echo "/$swapfile none swap sw 0 0" >> /etc/fstab
}

function create_swap_files {
  startlog "Creating swap files"
  create_swap_file swapfile1 2097152
  create_swap_file swapfile2 2097152
  create_swap_file swapfile3 2097152
  endlog "done"
}
function create_undercloud_conf {
  get_interfaces_name
  cat<<EOF>/home/stack/undercloud.conf
[DEFAULT]
local_interface = $lastinterface
undercloud_debug=false
local_ip = 192.0.2.1/24
network_gateway = 192.0.2.1
undercloud_public_host = 192.0.2.2
undercloud_admin_host = 192.0.2.3
network_cidr = 192.0.2.0/24
EOF
  if [ $vernum -lt 15 ]; then
    cat<<EOF>>/home/stack/undercloud.conf
masquerade_network = 192.0.2.0/24
EOF
  fi
  if [ $vernum -ge 15 ]; then
    cat<<EOF>>/home/stack/undercloud.conf
undercloud_enable_selinux = false
EOF
  fi
  cat<<EOF>>/home/stack/undercloud.conf
dhcp_start = 192.0.2.5
dhcp_end = 192.0.2.50
inspection_iprange = 192.0.2.100,192.0.2.120
EOF
}

function enable_nfs {
  if [ "$enablenfs" -eq 1 ]; then
    startlog "Enabling NFS"
    systemctl enable nfs-server
    systemctl start nfs-server
    iptables -I INPUT -p udp --dport 20048  -j ACCEPT
    iptables -I INPUT -p tcp --dport 20048  -j ACCEPT
    iptables -I INPUT -p udp --dport 2049  -j ACCEPT
    iptables -I INPUT -p tcp --dport 2049 -j ACCEPT
    iptables -I INPUT -p udp --dport 111  -j ACCEPT
    iptables -I INPUT -p tcp --dport 111  -j ACCEPT
    mkdir -p /exports/cinder
    mkdir -p /exports/glance
    cat<<EOF>/etc/exports
/exports/cinder *(rw,sync)
/exports/glance *(rw,sync)
EOF
    exportfs -r
    chown glance:glance /exports/glance
    endlog "done"
  fi
}

function inject_password {
  sed -i 's/github.com/###YOURGITHUBUSER###:###YOURGITHUBPASSWORD###@github.com/g' .git/config
}

function clone_repositories {
  cd /home/stack
  sudo su stack bash -c "git config --global user.email '$email'"
  sudo su stack bash -c "git config --global user.name '$fullname'"
  startlog "Cloning cloud repository"
  git clone http://github.com/david-hill/cloud > /dev/null
  endlog "done"
  if [[ "$installtype" =~ rdo ]]; then
    startlog "Cloning ${installtype}-$rdorelease repository"
    git clone http://github.com/david-hill/${installtype}-$rdorelease > /dev/null
    endlog "done"
    startlog "Checkout ${installtype}-$rdorelease branch"
    cd cloud
    git checkout ${installtype}-$rdorelease > /dev/null
    inject_password
    cd ..
    cd ${installtype}-$rdorelease
    git checkout master > /dev/null
    inject_password
    cd ..
    endlog "done"
  else
    startlog "Cloning $releasever repository"
    git clone http://github.com/david-hill/$releasever > /dev/null
    endlog "done"
    startlog "Checkout $minorver branch"
    cd cloud
    git checkout $minorver > /dev/null
    inject_password
    cd ..
    cd $releasever
    git checkout $minorver > /dev/null
    inject_password
    cd ..
    endlog "done"
  fi
}

function create_rdo_repo_file {
  if [[ "$rdorelease" =~ trunk ]]; then
    curl -L -o /etc/yum.repos.d/delorean.repo https://trunk.rdoproject.org/centos7-master/current-passed-ci/delorean.repo
    cat /etc/yum.repos.d/delorean.repo > /etc/yum.repos.d/$rdorelease.repo    
    echo "" >> /etc/yum.repos.d/$rdorelease.repo
    curl -L -o /etc/yum.repos.d/delorean-deps.repo http://trunk.rdoproject.org/centos7/delorean-deps.repo
    cat /etc/yum.repos.d/delorean-deps.repo | sed -e 's/$releasever/7/g' >> /etc/yum.repos.d/$rdorelease.repo    
    echo "" >> /etc/yum.repos.d/$rdorelease.repo
    rm -rf /etc/yum.repos.d/delorean.repo /etc/yum.repos.d/delorean-deps.repo
  elif [[ "$branchtype" =~ testing ]]; then
    curl -L -o /etc/yum.repos.d/delorean.repo https://trunk.rdoproject.org/centos7-$rdorelease/current/delorean.repo
    curl -L -o /etc/yum.repos.d/delorean-deps.repo https://trunk.rdoproject.org/centos7-$rdorelease/delorean-deps.repo
    cat /etc/yum.repos.d/delorean.repo > /etc/yum.repos.d/$rdorelease.repo    
    echo "" >> /etc/yum.repos.d/$rdorelease.repo
    cat /etc/yum.repos.d/delorean-deps.repo | sed -e 's/$releasever/7/g' >> /etc/yum.repos.d/$rdorelease.repo    
    rm -rf /etc/yum.repos.d/delorean.repo /etc/yum.repos.d/delorean-deps.repo
  else
    if [[ $eol =~ $rdorelease ]]; then
      cat << EOF > /etc/yum.repos.d/$rdorelease.repo
[openstack-$rdorelease]
name=OpenStack $rdorelease - Official
baseurl=http://mirror.centos.org/centos/7.3.1611/cloud/\$basearch/openstack-$rdorelease/
gpgcheck=0
enabled=1
EOF
    else
      cat << EOF > /etc/yum.repos.d/$rdorelease.repo
[openstack-$rdorelease]
name=OpenStack $rdorelease - Official
baseurl=http://mirror.centos.org/centos/7/cloud/\$basearch/openstack-$rdorelease/
gpgcheck=0
enabled=1
EOF
    fi
  fi
  return 0
}

function generate_overcloud_images {
  rc=255
  if [[ "$installtype" =~ rdo ]]; then
    startlog "Building new overcloud images"
    if [ ! -d /home/stack/images ]; then
      mkdir -p /home/stack/images
    fi

    cd /home/stack/images/
    if [ ! -e overcloud-full.tar ] || [ -e ../gen_images ]; then 
      file=$rdorelease
      cp /etc/yum.repos.d/$file.repo .

      rhelimage=$(ls rhel-guest-image-*)
      if [ -z "${rhelimage}" ]; then
        endlog "error"
      else
        rm -rf overcloud-*
        rm -rf ironic-*
        export DIB_LOCAL_IMAGE=$rhelimage
        export REG_METHOD=portal
        export NODE_DIST=rhel7
        export FS_TYPE=ext4
        export REG_USER="$rhnusername"
        export REG_PASSWORD="$rhnpassword"
        export REG_POOL_ID="$poolid"
        export DIB_YUM_REPO_CONF=${rdorelease}.repo
        export RDO_RELEASE=$rdorelease
        export DELOREAN_TRUNK_REPO="http://trunk.rdoproject.org/centos7-###RDORELEASE###/current/"
        export DELOREAN_REPO_FILE=${rdorelease}.repo
        export RDO_RELEASE=$rdorelease
        export OS_YAML="/usr/share/openstack-tripleo-common/image-yaml/overcloud-images-rhel7.yaml"
        if [[ $rdorelease =~ liberty ]]; then
          export REG_REPOS="rhel-${rhelrelease}-server-rpms rhel-${rhelrelease}-server-extras-rpms rhel-ha-for-rhel-${rhelrelease}-server-rpms rhel-${rhelrelease}-server-optional-rpms rhel-${rhelrelease}-server-rh-common-rpms rhel-${rhelrelease}-server-rhceph-1.3-tools-rpms rhel-${rhelrelease}-server-rhceph-1.3-osd-rpms rhel-${rhelrelease}-server-rhceph-1.3-mon-rpms"
        else
          export REG_REPOS="rhel-${rhelrelease}-server-rpms rhel-${rhelrelease}-server-extras-rpms rhel-ha-for-rhel-${rhelrelease}-server-rpms rhel-${rhelrelease}-server-optional-rpms rhel-${rhelrelease}-server-rh-common-rpms rhel-${rhelrelease}-server-rhceph-2-tools-rpms rhel-${rhelrelease}-server-rhceph-2-osd-rpms rhel-${rhelrelease}-server-rhceph-2-mon-rpms"
        fi
        export DIB_PYTHON_VERSION=2

        sed -i "s/kilo/$rdorelease/g" /usr/lib/python2.7/site-packages/tripleoclient/v1/overcloud_image.py
        if [[ ! "$rdorelease" =~ trunk ]] && [[ ! "$rdorelease" =~ pike ]]; then
          IMGBUILDARGS="--all"
        else
          IMGBUILDARGS="--config-file /usr/share/openstack-tripleo-common/image-yaml/overcloud-images.yaml --config-file $OS_YAML"
        fi
        openstack overcloud image build $IMGBUILDARGS 2>>$stderr 1>>$stdout
        rc=$?
        if [ $rc -eq  0 ]; then
          endlog "done"
          startlog "Creating image archives"
          filelist="overcloud-full.vmlinuz overcloud-full.initrd overcloud-full.qcow2 ironic-python-agent.kernel ironic-python-agent.initramfs"
          for file in $filelist; do
            if [ ! -e $file ]; then
              rc=1
              break
            fi
          done
          if [ $rc -eq 0 ]; then
            tar cf overcloud-full.tar overcloud-full.vmlinuz overcloud-full.initrd overcloud-full.qcow2 
            tar cf ironic-python-agent.tar ironic-python-agent.kernel ironic-python-agent.initramfs
            endlog "done"
            touch /home/stack/gen_images_completed
          else
            endlog "error"
            touch /home/stack/failed
          fi
        else
          endlog "error"
          touch /home/stack/failed
        fi
      fi
    else
      rc=0
      endlog "skip"
    fi
  else
    rc=0
  fi
  return $rc
}

function wait_for_cloudinit {
  return 0
  startlog "Waiting for cloud-init to complete"
  grep -q final /var/log/cloud-init.log
  return=$?
  ttimeout=300
  while [ $return -ne 0 ] && [ $ttimeout -ge 0 ]; do
    grep -q final /var/log/cloud-init.log
    return=$?
    sleep 1
    ttimeout=$(( $ttimeout - 1 ))
  done
  if [ $return -eq 0 ]; then
    endlog "done"
  else
    endlog "error"
  fi
  return  $return
}

function set_hostname {
  startlog "Setting hostname"
  if [[ "${installtype}" =~ rdo ]]; then
    hostnamectl set-hostname undercloud-0-$rdorelease.localdomain > /dev/null
    grep -q undercloud-0-$rdorelease /etc/hosts
    if [ $? -ne 0 ]; then
      sed -i "s/localhost4.localdomain4/localhost4.localdomain4 undercloud-0-$rdorelease undercloud-0-${rdorelease}.localdomain/" /etc/hosts
    fi
  else
    hostnamectl set-hostname undercloud-0-$releasever.localdomain > /dev/null
    grep -q undercloud-0-$releasever /etc/hosts
    if [ $? -ne 0 ]; then
      sed -i "s/localhost4.localdomain4/localhost4.localdomain4 undercloud-0-$releasever undercloud-0-${releasever}.localdomain/" /etc/hosts
    fi
  fi
  endlog "done"
}
function disable_selinux {
  startlog "Disabling selinux"
  /sbin/setenforce 0 > /dev/null
  sed -i 's/SELINUX=enforcing/SELINUX=permissive/g' /etc/selinux/config
  endlog "done"
}

function get_interfaces_name {
  interface=$( ip a  | grep ens | awk '{ print $2 }' | sed -e 's/://g' | head -1 )
  if [ -z "$interface" ]; then
    interface=eth0
  fi
  lastinterface=$( ip a  | grep ens | awk '{ print $2 }' | sed -e 's/://g' | tail -1 )
  if [ -z "$lastinterface" ]; then
    lastinterface=eth1
  fi
}

function prepare_environment {
  rc=0
  startlog "Adding stack user"
  sed -i 's/Defaults.*requiretty//' /etc/sudoers
  echo "stack ALL=(root) NOPASSWD:ALL" | tee -a /etc/sudoers.d/stack > /dev/null
  chmod 0440 /etc/sudoers.d/stack
  mkdir -p /home/stack/.ssh
  mkdir -p /home/stack/deployment_state
  echo "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCsmzCyXyxMAK0gSEcw+q+MXl7aH3Oa+HYOH+6VwJoJ20YJ8NdOY42wxPWJHmjymt96zSpLnB16Gcu5O3Lc6FyUVsqV08M5AwMMGhjVzYD93IuIszQ+v4gFTWRj5ONKM5SPh8baE5dpc8dN5DpxybA1buvDlgKh0atwmtDhW7nDAtdgJHYMlWpRs+Taya3J2zTjJ0K5Z4G5TLvOYwg6wFKLFCQln561wZ8/ZbhRmh8X3oggYlEC9sdt3/XHLZsUDf2HPaUC/yz0OEIokBX3Hg/csw1bWQIsN7vkfEWDU/uktXPPbOFoYMd0LlcX+jK57KC2UKtzBksGx16zYJMm5oq/ jenkins@zappa.orion" > /home/stack/.ssh/authorized_keys
  chmod 600 /home/stack/.ssh/authorized_keys
  chown -R stack:stack /home/stack
  endlog "done"
  startlog "Configuring network"
  echo "192.0.2.1 local_ip" >> /etc/hosts
  get_interfaces_name
  cat<<EOF>/etc/sysconfig/network-scripts/ifcfg-$interface
DEVICE="$interface"
BOOTPROTO="static"
BOOTPROTOv6="dhcp"
ONBOOT="yes"
TYPE="Ethernet"
USERCTL="yes"
PEERDNS="yes"
IPV6INIT="yes"
PERSISTENT_DHCLIENT="1"
IPADDR="192.168.122.2"
GATEWAY="192.168.122.1"
EOF
  if [[ "${installtype}" =~ internal ]]; then
      cat<<EOF>>/etc/sysconfig/network-scripts/ifcfg-$interface
DNS1="10.11.5.19"
DNS2="10.5.30.160"
#  DNS2="8.8.8.8"
EOF
  else
      cat<<EOF>>/etc/sysconfig/network-scripts/ifcfg-$interface
DNS1="8.8.4.4"
DNS2="8.8.8.8"
EOF
  fi
  if [[ "${installtype}" =~ internal ]]; then
      cat<<EOF>>/etc/resolv.conf
nameserver 10.5.30.160
nameserver 8.8.4.4
EOF
  else
      cat<<EOF>>/etc/resolv.conf
nameserver 8.8.8.8
nameserver 8.8.4.4
EOF
  fi
  endlog "done"
  startlog "Reloading network"
  /sbin/ifdown $interface 2>>$stderr 1>>$stdout
  /sbin/ifup $interface 2>>$stderr 1>>$stdout
  if ! $( ip a s $interface | grep -q 192.168.122.2 ); then
    endlog "failed"
    startlog "Reloading network"
    /sbin/ifdown $interface 2>>$stderr 1>>$stdout
    /sbin/ifup $interface 2>>$stderr 1>>$stdout
    if ! $( ip a s $interface | grep -q 192.168.122.2 ); then
      endlog "error"
    else
      endlog "done"
    fi
  else
    endlog "done"
  fi
  disable_selinux
  set_hostname
  startlog "Start SSHD"
  /sbin/sshd-keygen > /dev/null
  /sbin/sshd > /dev/null
  endlog "done"
  startlog "Fixing /etc/hosts"
  echo "209.132.183.107 subscription.rhn.redhat.com" >> /etc/hosts
  endlog "done"
  startlog "Waiting a bit"
  rc=255
  while [ $rc -ne 0 ]; do
    ping -c1 subscription.rhn.redhat.com 2>>$stderr 1>>$stdout
    rc=$?
    sleep 1
  done
  endlog "done"
  return $rc
}

function bootstrap {
  rc=0
  if [ ! -e /home/stack/elrepo ]; then
    prepare_environment
    rc=$?
    if [ $rc -eq 0 ]; then
      install_kernel
      rc=$?
    fi
  else
    kernel=$(uname -r)
    if [ -e /home/stack/reboot ]; then
      touch /home/stack/rebooted
    else
      install_kernel
      rc=$?
    fi
  fi
  return $rc
}

function wait_for_redhat {
  rc=255
  startlog "Waiting a bit"
  timeout=120
  while [ $rc -ne 0 ] && [ $timeout -gt 0 ]; do
    ping -c1 subscription.rhn.redhat.com 2>>$stderr 1>>$stdout
    rc=$?
    timeout=`expr $timeout - 1`
    sleep 1
  done
  if [ $timeout -eq 0 ]; then
    rc=254
  else 
    endlog "done"
  fi
  return $rc
}

function wait_for_poolid {
  poolid=
  cpt=0
  while [ -z "$poolid" ] && [ $cpt -lt 30 ]; do
    /sbin/subscription-manager list --available 2>>$stderr 1>>$stdout
    #poolid=$(/sbin/subscription-manager list --available | grep -v "^\ " | grep -i -A15 subscription\ name:.*openstack | grep Pool | awk '{ print $3 }' | head -1)
    #poolid=$(/sbin/subscription-manager list --available | sed -e 's/^ .*//g' | sed -e '/^$/d' | grep -A4 Employee | grep Pool | head -1 | awk '{ print $3 }')
    poolid=$(/sbin/subscription-manager list --available | grep -v "^\ " | grep -A10 Employee  | grep -B3 Unlimited | grep Pool | awk '{ print $3 }' | tail -1)
    echo "POOLID: $poolid" 2>>$stderr 1>>$stdout
    cpt=`expr $cpt + 1`
    sleep 1
  done
}

function attach_pool {
  startlog "Attaching a pool"
  /sbin/subscription-manager attach --pool=${poolid} 2>>$stderr 1>>$stdout
  rc=$?
  if [ $rc -eq 0 ]; then
    endlog "done"
  else
    endlog "error"
  fi
  return $rc
}

function disable_repositories {
  subscription-manager repos --disable *-htb-* 2>>$stderr 1>>$stdout
  rc=$?
  if [ $rc -eq 0 ]; then
    subscription-manager repos --disable *-rt-* 2>>$stderr 1>>$stdout
    rc=$?
  fi
  return $rc
}


function enable_repository {
  repository=$1
  startlog "Enabling ${repository}"
  /sbin/subscription-manager repos --enable $repository 2>>$stderr 1>>$stdout
  rc=$?
  if [ $rc -eq 0 ]; then
    endlog "done"
  else
    endlog "error"
  fi
  return $rc
}

function enable_required_repositories {
  if [ $rhelrelease -eq 7 ]; then
    enable_repository rhel-${rhelrelease}-server-rpms
    rc=$?
    if [ $rc -eq 0 ]; then
      enable_repository rhel-${rhelrelease}-server-eus-rpms
      rc=$?
      if [ $rc -eq 0 ]; then
        enable_repository rhel-${rhelrelease}-server-optional-rpms
        rc=$?
        if [ $rc -eq 0 ]; then
          enable_repository rhel-${rhelrelease}-server-extras-rpms
          rc=$?
          if [ $rc -eq 0 ]; then
            enable_repository rhel-${rhelrelease}-server-rh-common-rpms
            rc=$?
          fi
        fi
      fi
    fi
  else
    enable_repository rhel-${rhelrelease}-for-x86_64-appstream-rpms
    rc=$?
    if [ $rc -eq 0 ]; then
      enable_repository rhel-${rhelrelease}-for-x86_64-baseos-rpms
      rc=$?
    fi
  fi

  return $rc
}

function enable_official_repositories {
  if [[ "$releasever" =~ rhosp7 ]]; then
    enable_repository rhel-${rhelrelease}-server-openstack-7.0-director-rpms
    rc=$?
    if [ $rc -eq 0 ]; then
      enable_repository rhel-${rhelrelease}-server-openstack-7.0-rpms
    fi
  elif [[ "$releasever" =~ rhosp8 ]] || [[ "$releasever" =~ rhosp9 ]]; then
    enable_repository rhel-${rhelrelease}-server-openstack-${vernum}-director-rpms
    rc=$?
    if [ $rc -eq 0 ]; then
      enable_repository rhel-${rhelrelease}-server-openstack-${vernum}-rpms
      rc=$?
    fi
  elif [[ "$releasever" =~ rhosp10 ]] || [[ "$releasever" =~ rhosp11 ]] || [[ "$releasever" =~ rhosp12 ]]; then
    enable_repository rhel-${rhelrelease}-server-openstack-${vernum}-rpms
    rc=$?
  else
    rc=255
  fi
  return $rc
}
function enable_rdo_repositories {
  create_rdo_repo_file
  rc=$?
  if [ $rc -eq 0 ]; then
    if [[ "$rdorelease" =~ liberty ]]; then
      echo "distroverpkg=7.2" >> /etc/yum.conf
      sed -i 's/\$releasever/7Server/g' /etc/yum.repos.d/redhat.repo 2>>$stderr 1>>$stdout
      subscription-manager release --set=7.2 2>>$stderr 1>>$stdout
      subscription-manager repos --disable *-htb-* 2>>$stderr 1>>$stdout
      subscription-manager repos --disable *-rt-* 2>>$stderr 1>>$stdout
      subscription-manager repos 2>>$stderr 1>>$stdout
      yum clean all 2>>$stderr 1>>$stdout
    fi
    rc=0
  fi
  return $rc
}
function enable_internal_repositories {
  if [[ "$releasever" =~ rhosp7 ]]; then
    startlog "Installing rhos-release-latest"
    yum install -y http://rhos-release.virt.bos.redhat.com/repos/rhos-release/rhos-release-latest.noarch.rpm 2>>$stderr 1>>$stdout
    rc=$?
    if [ $rc -eq 0 ]; then
      endlog "done"
      startlog "Setting rhos-release to 7"
      rhos-release 7-director # -p Y3 2>>$stderr 1>>$stdout
      rc=$?
      if [ $rc -eq 0 ]; then
        endlog "done"
#                startlog "Setting z-release to 4"
#                rhos-release -p Z4  7 2>>$stderr 1>>$stdout
#                if [ $? -eq 0 ]; then 
#                  endlog "done"
          rc=0
#                else
#                  endlog "error"
#                fi
      else
        endlog "error"
      fi
    else
      endlog "error"
    fi
  elif [[ "$releasever" =~ rhosp8 ]] || [[ "$releasever" =~ rhosp9 ]] || [[ "$releasever" =~ rhosp10 ]] || [[ "$releasever" =~ rhosp11 ]] || [[ "$releasever" =~ rhosp12 ]]; then
    startlog "Installing rhos-release-latest"
    yum install -y http://rhos-release.virt.bos.redhat.com/repos/rhos-release/rhos-release-latest.noarch.rpm 2>>$stderr 1>>$stdout
    rc=$?
    if [ $rc -eq 0 ]; then
      endlog "done"
      startlog "Setting rhos-release to ${vernum}"
      rhos-release -P ${vernum}-director 2>>$stderr 1>>$stdout
      rc=$?
      if [ $rc -eq 0 ]; then
        endlog "done"
      else
        endlog "error"
      fi
    else
      endlog "error"
    fi
  else
    rc=255
  fi
  return $rc
}

function register_server_with_rhn {
  startlog "Registering the server with RH"
  /sbin/subscription-manager register --username $rhnusername --password $rhnpassword 2>>$stderr 1>>$stdout
  rc=$?
  if [ $? -eq 0 ]; then
    endlog "done"
  else
    endlog "error"
  fi
  return $rc
}
function register_system {
  rc=0
  if [ ! -e /home/stack/elrepo ]; then
    wait_for_redhat
    rc=$?
    if [ $rc -eq 0 ]; then
      register_server_with_rhn
      rc=$?
      if [ $rc -eq 0 ]; then
        wait_for_poolid
        attach_pool
        rc=$?
        if [ $rc -eq 0 ]; then
          disable_repositories
          rc=$?
          if [ $rc -eq 0 ]; then
            enable_required_repositories
            rc=$?
            if [[ "${installtype}" =~ official ]]; then
              enable_official_repositories
              rc=$?
            elif [[ "${installtype}" =~ rdo ]]; then
              enable_rdo_repositories
              rc=$?
            else
              enable_internal_repositories
              rc=$?
            fi
            if [ $vernum -ge 13 ]; then
              if [ $rhelrelease -eq 7 ]; then
                enable_repository rhel-${rhelrelease}-server-rhceph-3-tools-rpms
                rc=$?
              else
                enable_repository rhceph-4-tools-for-rhel-${rhelrelease}-x86_64-rpms
                rc=$?
              fi
            fi
          fi
        fi
      fi
    fi
  fi
  return $rc
}

function inject_merge_script {
  cat << EOF > /home/stack/diff_templates.sh
if [[ "$installtype" =~ rdo ]]; then
  cd /home/stack/${installtype}-$rdorelease/my-overcloud
else
  cd /home/stack/$releasever/my-overcloud
fi

find -type f | xargs -I% diff -u % /usr/share/openstack-tripleo-heat-templates/% | less
cd /usr/share/openstack-tripleo-heat-templates/

if [[ "$installtype" =~ rdo ]]; then
  find -type f | xargs -I% diff -u % /home/stack/${installtype}-$rdorelease/my-overcloud/% |  less
else
  find -type f | xargs -I% diff -u % /home/stack/$releasever/my-overcloud/% | less
fi
EOF
  cat << EOF > /home/stack/merge_templates.sh
if [[ "$installtype" =~ rdo ]]; then
  cd /home/stack/${installtype}-$rdorelease/my-overcloud
else
  cd /home/stack/$releasever/my-overcloud
fi
mv swap.yaml /tmp
mv network/config/single-nic-vlans/*.yaml /tmp
rsync -avgo --delete /usr/share/openstack-tripleo-heat-templates/ .
mv /tmp/swap.yaml .
mv /tmp/*.yaml network/config/single-nic-vlans/
git add *
git commit -a -m "Merging latest templates"
git push
EOF
}
function install_kernel {
  startlog "Waiting a bit"
  rc=255
  while [ $rc -ne 0 ]; do
    ping -c1 www.elrepo.org 2>>$stderr 1>>$stdout
    rc=$?
    sleep 1
  done
  endlog "done"
  startlog "Importing ELrepo key"
  rpm --import https://www.elrepo.org/RPM-GPG-KEY-elrepo.org 2>>$stderr 1>>$stdout
  rc=$?
  if [ $rc -eq 0 ]; then
    endlog "done"
    startlog "Installing ELrepo"
    rpm -Uvh http://www.elrepo.org/elrepo-release-7.0-2.el7.elrepo.noarch.rpm 2>>$stderr 1>>$stdout
    rc=$?
    if [ $rc -eq 0 ]; then
      endlog "done"
      if [[ "${installtype}" =~ rdo ]]; then
        startlog "Installing kernel-ml"
        yum --enablerepo=elrepo-extras --enablerepo=elrepo-kernel -y install kernel-ml 2>>$stderr 1>>$stdout
        rc=$?
        if [ $rc -eq 0 ]; then
          endlog "done"
          startlog "Enabling kernel-ml"
          grub2-set-default 0 2>>$stderr 1>>$stdout
          rc=$?
          if [ $rc -eq 0 ]; then
            endlog "done"
          else
            endlog "error"
          fi
        else
          endlog "error"
        fi
      else
        rc=0
      fi
      if [ $rc -eq 0 ]; then
        touch /.autorelabel
        touch /home/stack/elrepo
        touch /home/stack/reboot
        reboot
      fi
    else
      endlog "error"
    fi
  else
    endlog "error"
  fi
  return $rc
}

function log_rotate {
  if [ -e /var/log/cloud-init.log.1 ]; then
    mv /var/log/cloud-init.log.1 /var/log/cloud-init.log.2
  fi
  if [ -e /var/log/cloud-init.log.0 ]; then
    mv /var/log/cloud-init.log.0 /var/log/cloud-init.log.1
    mv /var/log/cloud-init.log /var/log/cloud-init.log.0
  else
    mv /var/log/cloud-init.log /var/log/cloud-init.log.0
  fi
  touch /var/log/cloud-init.log
}

function install_debuginfo {
  startlog "Installing debuginfo  packages"
  if [ $rhelrelease -eq 7 ]; then
    qemupackage=qemu-kvm-rhev
  else
    qemupackage=qemu-kvm
  fi
  debuginfo-install -y $qemupackage 2>>$stderr 1>>$stdout
  rc=$?
  if [ $rc -eq 0 ]; then
    endlog "done"
  else
    endlog "error"
  fi
  return $rc
}

function install_packages {
  startlog "Installing some packages"
  cp -pr /etc/yum.repos.d/* /root/
  if [ $rhelrelease -eq 7 ]; then
    yum install --disablerepo rhel-${rhelrelease}-server-htb-rpms -y ansible yum-plugin-priorities python-rdomanager-oscplugin git deltarpm sysstat python-tripleoclient python2-passlib.noarch gcc postgresql python-pip python-devel openssl-devel postgresql-devel selinux-policy-devel vim-enhanced ntp tmux gdb instack-undercloud ceph-ansible 2>>$stderr 1>>$stdout
  else 
    yum install --disablerepo rhel-${rhelrelease}-server-htb-rpms -y ansible python-rdomanager-oscplugin git sysstat gcc postgresql openssl-devel postgresql-devel selinux-policy-devel vim-enhanced tmux gdb ceph-ansible python3-tripleoclient.noarch 2>>$stderr 1>>$stdout
  fi
  rc=$?
  if [ $rc -eq 0 ]; then
    endlog "done"
  else
    endlog "error"
  fi
  return $rc
}

function update_os {
  startlog "Updating system"
  yum update -y 2>>$stderr 1>>$stdout
  rc=$?
  if [ $rc -eq 0 ]; then
    endlog "done"
  else
    endlog "error"
  fi
  return $rc
}

function deploy_undercloud {
  cd /home/stack/cloud
  cp /root/stackrc /home/stack
  cp /root/tripleo-undercloud-passwords /home/stack
  create_undercloud_conf
  configure_selinux
  su - stack -c "cd /home/stack/cloud; source ../stackrc; bash deploy_undercloud.sh"
  return $?
}

function grow_part {
  devid=$( df / | awk '{ print $1 }' | grep vda | sed -e 's/vda//g' )
  growpart /dev/vda ${devid} -u auto 2>>$stderr 1>>$stdout
  mount | grep vda${devid} | grep -q xfs
  if [ $? -eq 0 ]; then
    xfs_growfs /dev/vda${devid} 2>>$stderr 1>>$stdout
    if [ $? -ne 0 ]; then
      xfs_growfs / 2>>$stderr 1>>$stdout
    fi
  else
    resize2fs /dev/vda${devid} 2>>$stderr 1>>$stdout
  fi
}

function configure_ssl {
  sudo update-ca-trust enable
  sudo curl -k https://password.corp.redhat.com/RH-IT-Root-CA.crt -o /etc/pki/ca-trust/source/anchors/2015-RH-IT-Root-CA.pem;
  sudo update-ca-trust extract
}

function prepare_for_undercloud {
  clone_repositories
  configure_local_ntp
  wait_for_cloudinit
  grow_part
  set_hostname
  configure_ca_cert
  create_swap_files
  chown stack:stack -R /home/stack
  inject_merge_script
  generate_overcloud_images
  return $?
}
function main {
  log_rotate
  bootstrap
  rc=$?
  if [ $rc -eq 0 ]; then
    register_system
    rc=$?
    if [ $rc -eq 0 ]; then
      install_packages
      rc=$?
      if [ $rc -eq 0 ]; then
        update_os
        rc=$?
        if [ $rc -eq 0 ]; then
          prepare_for_undercloud
          rc=$?
          if [ $rc -eq 0 ]; then
            deploy_undercloud
            rc=$?
            if [ $rc -eq 0 ]; then
              touch /home/stack/completed
            fi
          fi
        fi
      fi
    fi
  fi
  cleanup
}

main
